syntax = "proto3";

package raft;

service Raft {
    rpc Post(PostArgs) returns (PostResponse);
    rpc Lookup(LookupArgs) returns (LookupResponse);
    rpc Config(ConfigArgs) returns (ConfigResponse);
    rpc RequestVote(RequestVoteArgs) returns (RequestVoteResponse);
    rpc AppendEntries(AppendEntriesArgs) returns (AppendEntriesResponse);
}

message PostArgs {
    string msg = 1;
}
message PostResponse {
	bool success = 1;
    string resp = 2;
	uint32 leaderId = 3;
}

message LookupArgs {
}
message LookupResponse {
    repeated LogEntry entries = 1;
}

message ConfigArgs {
	ConfigChange newConfig = 1;
}
message ConfigResponse {
    bool success = 1;
	string message = 2;
	map<uint32, string> servers = 3;
}

message RequestVoteArgs {
        // candidate’s term
	uint32 term = 1;
	
	// candidate requesting vote
	uint32 candidateId = 2;
	
	// index of candidate’s last log entry
        uint32 lastLogIndex = 3;
    
	// term of candidate’s last log entry
	uint32 lastLogTerm = 4;
}
message RequestVoteResponse {
        // currentTerm, for candidate to update itself
	uint32 term = 1;
	
	// true means candidate received vote
        bool voteGranted = 2;
}

message AppendEntriesArgs {
        // leader’s term
	uint32 term = 1;
	
	// so follower can redirect clients
        uint32 leaderId = 2;
	
	// index of log entry immediately preceding new ones
        uint32 prevLogIndex = 3;
	
	// term of prevLogIndex entry
        uint32 prevLogTerm = 4;
	
	// log entries to store (empty for heartbeat; may send more than one 
        // for efficiency)
        repeated LogEntry entries = 5;
    
	// leader’s commitIndex
	uint32  leaderCommit = 6;
}
message AppendEntriesResponse {
        // currentTerm, for leader to update itself
	uint32 term = 1;
	
	// true if follower contained entry matching prevLogIndex and prevLogTerm
        bool success = 2;
}

message LogEntry {
    uint32 term = 1;
    string msg = 2;
	ConfigChange configChange = 3;
}

message ConfigChange {
	string command = 1;
	map<uint32, string> servers = 2;
}

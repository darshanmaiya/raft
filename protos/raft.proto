syntax = "proto3";

package raft;

service Raft {
    rpc Post(PostArgs) returns (PostResponse);
    rpc Lookup(LookupArgs) returns (LookupResponse);
    rpc RequestVote(RequestVoteArgs) returns (RequestVoteResponse);
    rpc AppendEntries(AppendEntriesArgs) returns (AppendEntriesResponse);
}

message PostArgs {
    string msg = 1;
}
message PostResponse {
    string resp = 1;
}

message LookupArgs {
}
message LookupResponse {
    repeated string messages = 1;
}

message RequestVoteArgs {
    uint32 term = 1; // candidate’s term
    uint32 candidateId = 2; // candidate requesting vote
    uint32 lastLogIndex = 3; // index of candidate’s last log entry (§5.4)
    uint32 lastLogTerm = 4; // term of candidate’s last log entry (§5.4)
}
message RequestVoteResponse {
    uint32 term = 1; // currentTerm, for candidate to update itself
    bool voteGranted = 2; // true means candidate received vote
}

message AppendEntriesArgs {
    uint32 term = 1; // leader’s term
    uint32 leaderId = 2; // so follower can redirect clients
    uint32 prevLogIndex = 3; // index of log entry immediately preceding new ones
    uint32 prevLogTerm = 4; // term of prevLogIndex entry
    repeated LogEntry entries = 5; // log entries to store (empty for heartbeat; may send more than one for efficiency)
    uint32  leaderCommit = 6; // leader’s commitIndex
}
message AppendEntriesResponse {
    uint32 term = 1; // currentTerm, for leader to update itself
    bool success = 2; // true if follower contained entry matching prevLogIndex and prevLogTerm
}

message LogEntry {
    uint32 term = 1;
    string msg = 2;
}

// Code generated by protoc-gen-go.
// source: raft.proto
// DO NOT EDIT!

/*
Package raft is a generated protocol buffer package.

It is generated from these files:
	raft.proto

It has these top-level messages:
	PostArgs
	PostResponse
	LookupArgs
	LookupResponse
	ConfigArgs
	ConfigResponse
	RequestVoteArgs
	RequestVoteResponse
	AppendEntriesArgs
	AppendEntriesResponse
	LogEntry
	ConfigChange
*/
package raft

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type PostArgs struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *PostArgs) Reset()                    { *m = PostArgs{} }
func (m *PostArgs) String() string            { return proto.CompactTextString(m) }
func (*PostArgs) ProtoMessage()               {}
func (*PostArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PostResponse struct {
	Resp string `protobuf:"bytes,1,opt,name=resp" json:"resp,omitempty"`
}

func (m *PostResponse) Reset()                    { *m = PostResponse{} }
func (m *PostResponse) String() string            { return proto.CompactTextString(m) }
func (*PostResponse) ProtoMessage()               {}
func (*PostResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type LookupArgs struct {
}

func (m *LookupArgs) Reset()                    { *m = LookupArgs{} }
func (m *LookupArgs) String() string            { return proto.CompactTextString(m) }
func (*LookupArgs) ProtoMessage()               {}
func (*LookupArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type LookupResponse struct {
	Entries []*LogEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *LookupResponse) Reset()                    { *m = LookupResponse{} }
func (m *LookupResponse) String() string            { return proto.CompactTextString(m) }
func (*LookupResponse) ProtoMessage()               {}
func (*LookupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LookupResponse) GetEntries() []*LogEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type ConfigArgs struct {
	NewConfig *ConfigChange `protobuf:"bytes,1,opt,name=newConfig" json:"newConfig,omitempty"`
}

func (m *ConfigArgs) Reset()                    { *m = ConfigArgs{} }
func (m *ConfigArgs) String() string            { return proto.CompactTextString(m) }
func (*ConfigArgs) ProtoMessage()               {}
func (*ConfigArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ConfigArgs) GetNewConfig() *ConfigChange {
	if m != nil {
		return m.NewConfig
	}
	return nil
}

type ConfigResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *ConfigResponse) Reset()                    { *m = ConfigResponse{} }
func (m *ConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*ConfigResponse) ProtoMessage()               {}
func (*ConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type RequestVoteArgs struct {
	// candidate’s term
	Term uint32 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	// candidate requesting vote
	CandidateId uint32 `protobuf:"varint,2,opt,name=candidateId" json:"candidateId,omitempty"`
	// index of candidate’s last log entry
	LastLogIndex uint32 `protobuf:"varint,3,opt,name=lastLogIndex" json:"lastLogIndex,omitempty"`
	// term of candidate’s last log entry
	LastLogTerm uint32 `protobuf:"varint,4,opt,name=lastLogTerm" json:"lastLogTerm,omitempty"`
}

func (m *RequestVoteArgs) Reset()                    { *m = RequestVoteArgs{} }
func (m *RequestVoteArgs) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteArgs) ProtoMessage()               {}
func (*RequestVoteArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type RequestVoteResponse struct {
	// currentTerm, for candidate to update itself
	Term uint32 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	// true means candidate received vote
	VoteGranted bool `protobuf:"varint,2,opt,name=voteGranted" json:"voteGranted,omitempty"`
}

func (m *RequestVoteResponse) Reset()                    { *m = RequestVoteResponse{} }
func (m *RequestVoteResponse) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteResponse) ProtoMessage()               {}
func (*RequestVoteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type AppendEntriesArgs struct {
	// leader’s term
	Term uint32 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	// so follower can redirect clients
	LeaderId uint32 `protobuf:"varint,2,opt,name=leaderId" json:"leaderId,omitempty"`
	// index of log entry immediately preceding new ones
	PrevLogIndex uint32 `protobuf:"varint,3,opt,name=prevLogIndex" json:"prevLogIndex,omitempty"`
	// term of prevLogIndex entry
	PrevLogTerm uint32 `protobuf:"varint,4,opt,name=prevLogTerm" json:"prevLogTerm,omitempty"`
	// log entries to store (empty for heartbeat; may send more than one
	// for efficiency)
	Entries []*LogEntry `protobuf:"bytes,5,rep,name=entries" json:"entries,omitempty"`
	// leader’s commitIndex
	LeaderCommit uint32 `protobuf:"varint,6,opt,name=leaderCommit" json:"leaderCommit,omitempty"`
}

func (m *AppendEntriesArgs) Reset()                    { *m = AppendEntriesArgs{} }
func (m *AppendEntriesArgs) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesArgs) ProtoMessage()               {}
func (*AppendEntriesArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *AppendEntriesArgs) GetEntries() []*LogEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type AppendEntriesResponse struct {
	// currentTerm, for leader to update itself
	Term uint32 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	// true if follower contained entry matching prevLogIndex and prevLogTerm
	Success bool `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *AppendEntriesResponse) Reset()                    { *m = AppendEntriesResponse{} }
func (m *AppendEntriesResponse) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesResponse) ProtoMessage()               {}
func (*AppendEntriesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type LogEntry struct {
	Term         uint32        `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	Msg          string        `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	ConfigChange *ConfigChange `protobuf:"bytes,3,opt,name=configChange" json:"configChange,omitempty"`
}

func (m *LogEntry) Reset()                    { *m = LogEntry{} }
func (m *LogEntry) String() string            { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()               {}
func (*LogEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *LogEntry) GetConfigChange() *ConfigChange {
	if m != nil {
		return m.ConfigChange
	}
	return nil
}

type ConfigChange struct {
	Command string            `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
	Servers map[uint32]string `protobuf:"bytes,2,rep,name=servers" json:"servers,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ConfigChange) Reset()                    { *m = ConfigChange{} }
func (m *ConfigChange) String() string            { return proto.CompactTextString(m) }
func (*ConfigChange) ProtoMessage()               {}
func (*ConfigChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ConfigChange) GetServers() map[uint32]string {
	if m != nil {
		return m.Servers
	}
	return nil
}

func init() {
	proto.RegisterType((*PostArgs)(nil), "raft.PostArgs")
	proto.RegisterType((*PostResponse)(nil), "raft.PostResponse")
	proto.RegisterType((*LookupArgs)(nil), "raft.LookupArgs")
	proto.RegisterType((*LookupResponse)(nil), "raft.LookupResponse")
	proto.RegisterType((*ConfigArgs)(nil), "raft.ConfigArgs")
	proto.RegisterType((*ConfigResponse)(nil), "raft.ConfigResponse")
	proto.RegisterType((*RequestVoteArgs)(nil), "raft.RequestVoteArgs")
	proto.RegisterType((*RequestVoteResponse)(nil), "raft.RequestVoteResponse")
	proto.RegisterType((*AppendEntriesArgs)(nil), "raft.AppendEntriesArgs")
	proto.RegisterType((*AppendEntriesResponse)(nil), "raft.AppendEntriesResponse")
	proto.RegisterType((*LogEntry)(nil), "raft.LogEntry")
	proto.RegisterType((*ConfigChange)(nil), "raft.ConfigChange")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Raft service

type RaftClient interface {
	Post(ctx context.Context, in *PostArgs, opts ...grpc.CallOption) (*PostResponse, error)
	Lookup(ctx context.Context, in *LookupArgs, opts ...grpc.CallOption) (*LookupResponse, error)
	Config(ctx context.Context, in *ConfigArgs, opts ...grpc.CallOption) (*ConfigResponse, error)
	RequestVote(ctx context.Context, in *RequestVoteArgs, opts ...grpc.CallOption) (*RequestVoteResponse, error)
	AppendEntries(ctx context.Context, in *AppendEntriesArgs, opts ...grpc.CallOption) (*AppendEntriesResponse, error)
}

type raftClient struct {
	cc *grpc.ClientConn
}

func NewRaftClient(cc *grpc.ClientConn) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) Post(ctx context.Context, in *PostArgs, opts ...grpc.CallOption) (*PostResponse, error) {
	out := new(PostResponse)
	err := grpc.Invoke(ctx, "/raft.Raft/Post", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) Lookup(ctx context.Context, in *LookupArgs, opts ...grpc.CallOption) (*LookupResponse, error) {
	out := new(LookupResponse)
	err := grpc.Invoke(ctx, "/raft.Raft/Lookup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) Config(ctx context.Context, in *ConfigArgs, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := grpc.Invoke(ctx, "/raft.Raft/Config", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) RequestVote(ctx context.Context, in *RequestVoteArgs, opts ...grpc.CallOption) (*RequestVoteResponse, error) {
	out := new(RequestVoteResponse)
	err := grpc.Invoke(ctx, "/raft.Raft/RequestVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) AppendEntries(ctx context.Context, in *AppendEntriesArgs, opts ...grpc.CallOption) (*AppendEntriesResponse, error) {
	out := new(AppendEntriesResponse)
	err := grpc.Invoke(ctx, "/raft.Raft/AppendEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Raft service

type RaftServer interface {
	Post(context.Context, *PostArgs) (*PostResponse, error)
	Lookup(context.Context, *LookupArgs) (*LookupResponse, error)
	Config(context.Context, *ConfigArgs) (*ConfigResponse, error)
	RequestVote(context.Context, *RequestVoteArgs) (*RequestVoteResponse, error)
	AppendEntries(context.Context, *AppendEntriesArgs) (*AppendEntriesResponse, error)
}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

func _Raft_Post_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).Post(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.Raft/Post",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).Post(ctx, req.(*PostArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.Raft/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).Lookup(ctx, req.(*LookupArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.Raft/Config",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).Config(ctx, req.(*ConfigArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.Raft/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).RequestVote(ctx, req.(*RequestVoteArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.Raft/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).AppendEntries(ctx, req.(*AppendEntriesArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "raft.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Post",
			Handler:    _Raft_Post_Handler,
		},
		{
			MethodName: "Lookup",
			Handler:    _Raft_Lookup_Handler,
		},
		{
			MethodName: "Config",
			Handler:    _Raft_Config_Handler,
		},
		{
			MethodName: "RequestVote",
			Handler:    _Raft_RequestVote_Handler,
		},
		{
			MethodName: "AppendEntries",
			Handler:    _Raft_AppendEntries_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 572 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x96, 0x93, 0x34, 0x4d, 0x27, 0x3f, 0x94, 0xa5, 0x15, 0xc1, 0x20, 0x51, 0xed, 0x29, 0xe2,
	0x10, 0x55, 0x41, 0x42, 0x90, 0x03, 0xa8, 0x0a, 0x11, 0xaa, 0xe8, 0x01, 0x19, 0xc4, 0xdd, 0xc4,
	0x53, 0x37, 0x6a, 0x62, 0x9b, 0xdd, 0x4d, 0xa0, 0x0f, 0xc1, 0x2b, 0xc0, 0x63, 0xf1, 0x3a, 0xec,
	0xaf, 0xb3, 0x4e, 0x42, 0x4f, 0x9e, 0xf9, 0x76, 0xfe, 0xbe, 0xf1, 0xcc, 0x00, 0xb0, 0xf8, 0x5a,
	0x0c, 0x0b, 0x96, 0x8b, 0x9c, 0x34, 0x94, 0x4c, 0x9f, 0x41, 0xeb, 0x53, 0xce, 0xc5, 0x05, 0x4b,
	0x39, 0x39, 0x86, 0xfa, 0x92, 0xa7, 0xfd, 0xe0, 0x2c, 0x18, 0x1c, 0x45, 0x4a, 0xa4, 0x14, 0x3a,
	0xea, 0x35, 0x42, 0x5e, 0xe4, 0x19, 0x47, 0x42, 0xa0, 0xc1, 0xa4, 0x6c, 0x4d, 0xb4, 0x4c, 0x3b,
	0x00, 0x57, 0x79, 0x7e, 0xbb, 0x2a, 0x54, 0x0c, 0x3a, 0x86, 0x9e, 0xd1, 0x4a, 0x9f, 0x01, 0x1c,
	0x62, 0x26, 0xd8, 0x1c, 0xb9, 0x74, 0xab, 0x0f, 0xda, 0xa3, 0xde, 0x50, 0x57, 0x71, 0x95, 0xa7,
	0x53, 0x89, 0xdf, 0x45, 0xee, 0x99, 0xbe, 0x05, 0x98, 0xe4, 0xd9, 0xf5, 0x3c, 0xd5, 0xd5, 0x9c,
	0xc3, 0x51, 0x86, 0x3f, 0x0c, 0xa0, 0x13, 0xb6, 0x47, 0xc4, 0x78, 0x1a, 0x6c, 0x72, 0x13, 0x67,
	0x29, 0x46, 0x1b, 0x23, 0xfa, 0x1e, 0x7a, 0x46, 0x2a, 0x73, 0xf7, 0xe1, 0x90, 0xaf, 0x66, 0x33,
	0xe4, 0x5c, 0x47, 0x68, 0x45, 0x4e, 0x55, 0x2f, 0x4b, 0xf9, 0x8d, 0x53, 0xec, 0xd7, 0x34, 0x19,
	0xa7, 0xd2, 0x5f, 0x01, 0x3c, 0x88, 0xf0, 0xfb, 0x0a, 0xb9, 0xf8, 0x9a, 0x0b, 0xd4, 0xb5, 0x48,
	0xde, 0x02, 0xd9, 0x52, 0x07, 0xe9, 0x46, 0x5a, 0x26, 0x67, 0xd0, 0x9e, 0xc5, 0x59, 0x32, 0x4f,
	0x62, 0x81, 0x97, 0x89, 0x8e, 0xd2, 0x8d, 0x7c, 0x88, 0xc8, 0xee, 0x2d, 0x62, 0x2e, 0x24, 0xd1,
	0xcb, 0x2c, 0xc1, 0x9f, 0xfd, 0xba, 0x36, 0xa9, 0x60, 0x2a, 0x8a, 0xd5, 0xbf, 0xa8, 0x04, 0x0d,
	0x13, 0xc5, 0x83, 0xe8, 0x47, 0x78, 0xe4, 0x95, 0xe3, 0xff, 0x8a, 0x7d, 0x25, 0xad, 0xa5, 0xcd,
	0x07, 0x16, 0x67, 0x02, 0x4d, 0x49, 0xad, 0xc8, 0x87, 0xe8, 0xdf, 0x00, 0x1e, 0x5e, 0x14, 0x05,
	0x66, 0xc9, 0xd4, 0x34, 0xfd, 0xbf, 0xf4, 0x42, 0x68, 0x2d, 0x30, 0x4e, 0x90, 0x95, 0xdc, 0x4a,
	0x5d, 0x11, 0x2b, 0x18, 0xae, 0xb7, 0x89, 0xf9, 0x98, 0xaa, 0xc5, 0xea, 0x3e, 0x31, 0x0f, 0xf2,
	0x07, 0xe3, 0xe0, 0xde, 0xc1, 0xd0, 0x8d, 0xd4, 0xb9, 0x27, 0xf9, 0x72, 0x39, 0x17, 0xfd, 0xa6,
	0x6d, 0xa4, 0x87, 0xd1, 0x29, 0x9c, 0x56, 0x88, 0xdd, 0xdb, 0x28, 0x6f, 0x2e, 0x6a, 0x95, 0xb9,
	0xa0, 0x37, 0xd0, 0x72, 0xf9, 0xf7, 0x7a, 0xda, 0x1d, 0xa9, 0x95, 0x3b, 0x42, 0x5e, 0x41, 0x67,
	0xe6, 0x0d, 0xa4, 0x6e, 0xc6, 0xfe, 0x51, 0xad, 0xd8, 0xd1, 0x3f, 0x01, 0x74, 0xfc, 0x67, 0x55,
	0xd4, 0x4c, 0x72, 0x91, 0x03, 0x64, 0xf7, 0xcb, 0xa9, 0xe4, 0x8d, 0x2c, 0x17, 0xd9, 0x1a, 0x99,
	0x2a, 0x57, 0x75, 0xea, 0xf9, 0x6e, 0xf4, 0xe1, 0x67, 0x63, 0x61, 0x5b, 0x67, 0xed, 0xc3, 0x31,
	0x74, 0xfc, 0x07, 0x55, 0xff, 0x2d, 0xde, 0x59, 0x4a, 0x4a, 0x24, 0x27, 0x70, 0xb0, 0x8e, 0x17,
	0x2b, 0xb7, 0x07, 0x46, 0x19, 0xd7, 0x5e, 0x07, 0xa3, 0xdf, 0x35, 0x68, 0x44, 0x32, 0x0f, 0x79,
	0x01, 0x0d, 0x75, 0x06, 0x88, 0xfd, 0x41, 0xee, 0x60, 0x84, 0x64, 0xa3, 0x97, 0xed, 0x3e, 0x87,
	0xa6, 0x39, 0x00, 0xe4, 0xd8, 0xfd, 0x4e, 0x77, 0x1c, 0xc2, 0x13, 0x1f, 0xf1, 0x3d, 0x0c, 0x11,
	0xe7, 0xb1, 0x39, 0x02, 0xce, 0x63, 0x6b, 0xad, 0xdf, 0x41, 0xdb, 0x5b, 0x09, 0x72, 0x6a, 0x8c,
	0xb6, 0x96, 0x36, 0x7c, 0xb2, 0x03, 0x97, 0x01, 0xa6, 0xd0, 0xad, 0x0c, 0x0b, 0x79, 0x6c, 0x6c,
	0x77, 0x56, 0x23, 0x7c, 0xba, 0xe7, 0xc1, 0x85, 0xf9, 0xd6, 0xd4, 0x97, 0xf4, 0xe5, 0xbf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x5c, 0x30, 0x59, 0x9a, 0x57, 0x05, 0x00, 0x00,
}
